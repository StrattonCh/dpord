setwd("~/GitHub/dpord")
rm(list = ls())
library(knitr)
hook_chunk <- knitr::knit_hooks$get('chunk')
knit_hooks$set(chunk = function(x, options) {
# add latex commands if chunk option singlespacing is TRUE
if(isTRUE(options$singlespacing)){
return(sprintf("\\singlespacing\n %s \n\\doublespacing", hook_chunk(x, options)))
} else{
return(hook_chunk(x, options))
}
})
knitr::opts_chunk$set(
fig.align = "center",
tidy = T,
singlespacing = TRUE,
cache = FALSE,
fig.dim = c(10,8),
message = FALSE,
warning = FALSE,
comment = NA,
echo = F
)
# packages
packs <- c("dplyr", "nimble", "htmltools", "ggplot2", "sf", "Rcpp", "RcppArmadillo", "inline", "mvtnorm", "readr", "parallel", "xtable", "rstan", "coda", "vegan", "tidyr", "gganimate", "stringr", "scatterplot3d", "plot3D", "plotly", "tidyverse")
sapply(packs, require, character.only = T)
rm(packs)
# convenience
`%notin%` <- Negate("%in%")
options(mc.cores = parallel::detectCores())
rm(list = ls())
craters_data_raw <- readxl::read_excel("craters data/Sage_AnalysisMatrix_wZeros_SppCover_BareGrdCover_PlotsAsRows_CRMO_2019_20210714_1723.xlsx")
spp_codes <- paste0(
str_sub(colnames(craters_data_raw)[6:ncol(craters_data_raw)], start = 1, end = 3),
sapply(colnames(craters_data_raw)[6:ncol(craters_data_raw)], function(x) str_sub(x, start = str_locate(x, " ")[1] + 1, end = str_locate(x, " ")[1] + 3))
) %>% toupper
spp_codes[c(17:20, 48:49)] <- c("ARTTRID", "ARTTRIP", "ASTSPP", "ASTRSPP", "ERISPP", "ERIOSPP")
craters_data <- craters_data_raw %>%
rename_with(
.cols = 6:ncol(.),
~spp_codes
) %>%
select_if(~sum(!is.na(.)) > 0) %>%
select_if(~all(is.numeric(.))) %>%
select_if(colSums(.) != 0) %>%
bind_cols(
craters_data_raw %>% dplyr::select(Unit_Code, Loc_Name),
.
)
craters_metadata <- readxl::read_excel("craters data/NPS-SageVegPlots-CRMO-2019-PlotAttributes.xlsx") %>%
mutate(frame_num = sapply(strsplit(Sample_Frame, split = "_"), function(x) x[2])) %>%
st_as_sf(
.,
coords = c("X_Coord", "Y_Coord"),
crs = "+proj=utm +zone=12"
) %>%
st_transform(., crs = 4269)
boundaries <- read_sf("craters data/nps_boundary")
crmp_crmo <- boundaries %>% filter(UNIT_CODE %in% c("CRMP", "CRMO"))
# create response matrix
set.seed(10152021)
Y <- craters_data %>%
mutate(
plot = sapply(stringr::str_split(Loc_Name, pattern = "_"), function(x) x[2])
) %>%
group_by(plot) %>%
# slice_sample(n = 25) %>%
ungroup %>%
dplyr::select(ACHHYM:ZIGSPP) %>%
as.matrix()
ggplot() +
geom_sf(data = crmp_crmo, fill = NA) +
geom_sf(
data = craters_metadata %>%
group_by(Sample_Frame) %>%
slice(1) %>%
ungroup
) +
geom_sf_text(
data = craters_metadata %>%
group_by(Sample_Frame) %>%
slice(1) %>%
ungroup,
aes(label = frame_num),
size = 3,
nudge_x = .02, nudge_y = .01
) +
theme_bw()
nimble_summary <- function(fit, warmup = nrow(fit[[1]])/2, thin = 1){
# convert to coda for normal summary
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
coda_samples <- as.mcmc.list(lapply(fit_warmup, function(x) as.mcmc(
x, start = warmup+1, end = nrow(fit), thin = thin
)))
sum <- summary(coda_samples)
params <- dimnames(sum$statistics)[[1]]
tmp_sum <- cbind(sum$statistics, sum$quantiles)
# get r hat / n_eff
mat <- matrix(NA, nrow = nrow(tmp_sum), ncol = 3)
colnames(mat) <- c("Rhat", "ess_bulk", "ess_tail")
for(i in 1:nrow(tmp_sum)){
tmp <- sapply(fit, function(x) x[,i])
mat[i,] <- c(Rhat(tmp), ess_bulk(tmp), ess_tail(tmp))
}
# out
out <- cbind(tmp_sum, mat)
return(out)
}
fit_model <- function(seed = 1, code, data, constants, inits, niter, nchains, thin = 1){
library(nimble)
# R model
model <- nimbleModel(code, constants, data)
# C model
model_c <- compileNimble(model)
# R mcmc
model_conf <- configureMCMC(model)
model_conf$addMonitors(c("clus_id", "z"))
# R mcmc
mcmc <- buildMCMC(model_conf)
# C mcmc
mcmc_c <- compileNimble(mcmc, project = model_c)
# run model
out <- runMCMC(
mcmc_c,
niter = niter,
nchains = nchains,
thin = thin,
init = inits,
setSeed = seed
)
# out
return(out)
}
ord_ls <- function(mcmc, d = 2, seed = NULL, force_K = NULL){
# optional seed
if(!is.null(seed)) set.seed(seed)
# housekeeping
mu <- lapply(mcmc, function(x) x[,which(grepl("mu", colnames(x)))])
clus_id <- lapply(mcmc, function(x) x[,which(grepl("clus_id", colnames(x)))])
other_ndx <- c(1:length(colnames(mcmc[[1]])))[-c(
sort(c(
which(grepl("clus_id", colnames(mcmc[[1]]))),
which(grepl("mu", colnames(mcmc[[1]])))
))
)]
other <- lapply(mcmc, function(x) x[,other_ndx])
mu_mcmc <- do.call("rbind", mu)
clus_mcmc <- do.call("rbind", clus_id)
other_mcmc <- do.call("rbind", other)
# helper function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# step 1 - determine number of non-empty cluster for each iteration
n_clus_mcmc <- apply(clus_mcmc, 1, function(x) length(unique(x)))
# step 2 - estimate the mode
if(is.null(force_K)){
n_clus_mode <- getmode(n_clus_mcmc)
} else{
n_clus_mode <- force_K
}
# step 3 - filter to iterations with n_clus_mcmc = n_clus_mode
## filter first
which_equal_mode_index <- which(n_clus_mcmc == n_clus_mode)
mu_mcmc_filtered <- mu_mcmc[which_equal_mode_index, ]
clus_mcmc_filtered <- clus_mcmc[which_equal_mode_index, ]
other_mcmc_filtered <- other_mcmc[which_equal_mode_index, ]
## remove empty clusters - loop
mu_reduced <- matrix(NA, nrow = nrow(mu_mcmc_filtered), ncol = n_clus_mode * d)
clus_reduced <- array(NA, dim = dim(clus_mcmc_filtered))
for(i in 1:length(which_equal_mode_index)){
clus_id_i <- sort(unique(clus_mcmc_filtered[i, ]))
col_ndx <- which(
stringr::str_sub(
colnames(mu_mcmc_filtered),
start = stringr::str_locate(colnames(mu_mcmc_filtered), pattern = "\\[")[,1] + 1,
end = stringr::str_locate(colnames(mu_mcmc_filtered), pattern = "\\,")[,1] - 1
) %in% clus_id_i
)
mu_reduced[i, ] <- mu_mcmc_filtered[i,col_ndx]
colnames(mu_reduced) <- paste0("mu[", rep(1:n_clus_mode, d), ", ", rep(1:d, each = n_clus_mode), "]")
clus_reduced[i, ] <- as.numeric(factor(clus_mcmc_filtered[i,]))
colnames(clus_reduced) <- colnames(clus_mcmc_filtered)
}
# step 4 - create data matrix, cluster with k-means
data_matrix <- matrix(
c(mu_reduced),
nrow = nrow(mu_reduced) * n_clus_mode,
ncol = d
)
k_means <- kmeans(data_matrix, centers = n_clus_mode)
rho <- matrix(k_means$cluster, nrow = nrow(mu_reduced), ncol = n_clus_mode)
# step 5 - check whether rho_i is a permutation of 1:n_clus_mode
keep_ndx <- which(apply(rho, 1, function(x) all(sort(x) == 1:n_clus_mode)))
mu_reduced <- mu_reduced[keep_ndx,]
clus_reduced <- clus_reduced[keep_ndx,]
other_reduced <- other_mcmc_filtered[keep_ndx, ]
rho <- rho[keep_ndx,] %>% as.matrix(., ncol = n_clus_mode)
# step 6 - relabel according to rho
## relabel mus first - works, but slow
mu_relabeled <- array(NA, dim = dim(mu_reduced))
colnames(mu_relabeled) <- colnames(mu_reduced)
for(i in 1:nrow(mu_relabeled)){
for(j in 1:ncol(mu_relabeled)){
# get group id
group_id <- stringr::str_sub(
colnames(mu_reduced)[j],
start = stringr::str_locate(colnames(mu_reduced)[j], pattern = "\\[")[,1] + 1,
end = stringr::str_locate(colnames(mu_reduced)[j], pattern = "\\,")[,1] - 1
) %>% as.numeric()
dim_id <- stringr::str_sub(
colnames(mu_reduced)[j],
start = stringr::str_locate(colnames(mu_reduced)[j], pattern = "\\,")[,1] + 1,
end = stringr::str_locate(colnames(mu_reduced)[j], pattern = "\\]")[,1] - 1
) %>% as.numeric()
# replace with proper value according to rho
rho_i <- rho[i, ]
mu_relabeled[i,j] <- mu_reduced[i, which(
colnames(mu_reduced) == paste0("mu[", which(rho_i == group_id), ", ", dim_id, "]")
)]
}
}
## relabel clus_id's
clus_relabeled <- array(NA, dim = dim(clus_reduced))
colnames(clus_relabeled) <- colnames(clus_reduced)
for(i in 1:nrow(clus_relabeled)){
rho_i <- rho[i,]
clus_id_i <- clus_reduced[i,]
clus_relabeled[i,] <- sapply(clus_id_i, function(x) rho_i[x])
}
out <- list(
mu = mu_relabeled,
clus_id = clus_relabeled,
other = other_reduced,
which_iter = which_equal_mode_index[keep_ndx]
)
return(out)
}
library(gmp)
# probability mass function from Antoniak (1974)
antoniak <- function(k, alpha, n){
alpha <- gmp::as.bigq(as.character(MASS::fractions(alpha)))
# A.n first
A.n <- function(x, n){
sum(abs(gmp::Stirling1.all(n)) * x^(1:n))
}
# compute mass
out <- as.numeric((abs(gmp::Stirling1(n, k)) * alpha^k) / A.n(alpha, n))
return(out)
}
plot(sapply(1:10, function(x) antoniak(x, .5/10, 1000)), main = "Prior mass on number of groups for n = 1518, alpha = .5/1-")
plot(sapply(1:10, function(x) antoniak(x, .5/10, 100)), main = "Prior mass on number of groups for n = 1518, alpha = .5/1-")
plot(sapply(1:10, function(x) antoniak(x, .5/10, 1000)), main = "Prior mass on number of groups for n = 1518, alpha = .5/1-")
plot(sapply(1:10, function(x) antoniak(x, .5/10, 1518)), main = "Prior mass on number of groups for n = 1518, alpha = .5/1-")
plot(sapply(1:10, function(x) antoniak(x, .5/10, 1218)), main = "Prior mass on number of groups for n = 1518, alpha = .5/1-")
plot(sapply(1:10, function(x) antoniak(x, .5/10, 1518)), main = "Prior mass on number of groups for n = 1518, alpha = .5/1-")
fit <- readRDS("rds files/crmo_bin_3d_1_3_point5_10.rds")
